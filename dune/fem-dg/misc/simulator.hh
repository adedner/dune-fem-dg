#ifndef DUNE_FEM_DG_SIMULATOR_HH
#define DUNE_FEM_DG_SIMULATOR_HH

#if defined GRIDDIM
#ifndef CODEDIM
#define CODEDIM GRIDDIM
#endif
#endif

// in dbug mode also enable FieldVector checking and dune devel mode
#ifndef NDEBUG
#define DUNE_ISTL_WITH_CHECKING
#define DUNE_DEVEL_MODE
#endif

// -1 means higher order FV
#if POLORDER == -1
#define HIGHER_ORDER_FV
#undef POLORDER
#define POLORDER 0
#endif

#ifdef ONLY_ONE_P
#define MIN_POLORD POLORDER
#define MAX_POLORD POLORDER
#else
#define MIN_POLORD 1
#define MAX_POLORD 4
#endif

#include <memory>
#include <dune/common/version.hh>

// streams for backup
#include <dune/fem-dg/misc/streams.hh>

#if defined USE_BASEFUNCTIONSET_CODEGEN || defined BASEFUNCTIONSET_CODEGEN_GENERATE
#define USE_FEMDG_BASISFUNCTIONSET
#include <dune/fem-dg/main/default.hh>
#ifdef NEWBASEFCT_CACHING
#include <dune/fem-dg/main/codegen2.hh>
#else
#include <dune/fem-dg/main/codegen.hh>
#endif
#endif

#include <dune/fem-dg/pass/threadhandle.hh>
#if defined USE_SMP_PARALLEL
#include <dune/fem/misc/threads/threadmanager.hh>
#include <dune/fem-dg/pass/threadpass.hh>

#if HAVE_DUNE_FEM_DG
#define NSMOD_USE_SMP_PARALLEL
#endif
#endif

#include <dune/fem-dg/stepper/base.hh>

#include <dune/fem/misc/femeoc.hh>
#include <dune/fem/misc/flops.hh>

// Dune includes
#ifdef BASEFUNCTIONSET_CODEGEN_GENERATE
#include <dune/fem/space/basisfunctionset/codegen.hh>

std::string autoFilename(const int dim, const int polynomialOrder )
{
  std::stringstream name;
  name << "autogeneratedcode_" << dim << "d_k" << polynomialOrder << ".hh";
  return name.str();
}

void finalizeCodegen()
{
  //////////////////////////////////////////////////
  //  write include header
  //////////////////////////////////////////////////
  std::ofstream file( Dune::Fem::Parameter::commonInputPath() + "/autogeneratedcode.hh" );

  if( file )
  {
    for( int dim=1; dim<4; ++dim )
    {
      std::stringstream dimfilename;
      dimfilename << Dune::Fem::Parameter::commonInputPath() << "/autogeneratedcode/autogeneratedcode_" << dim << "d.hh";
      file << "#if CODEDIM == " << dim << std::endl;
      file << "#include \"" << dimfilename.str() << "\"" << std::endl;
      file << "#endif" << std::endl;

      std::ofstream dimfile( dimfilename.str().c_str() );
      if( dimfile )
      {
        const int maxPolOrder = ( dim == 3 ) ? 4 : 8 ;
        // max polorder is 4 in 3d and 8 in 2d at the moment
        for( int i=0; i <= maxPolOrder; ++ i )
        {
          dimfile << "#if POLORDER == " << i << std::endl;
          dimfile << "#include \"" << autoFilename( dim, i ) << "\"" << std::endl;
          dimfile << "#endif" << std::endl;
        }
      }
    }
  }
  // dump all information
  std::cerr << "All automated code generated, bye, bye !! " << std::endl;
}
#endif


namespace Dune
{
  struct FlopStartObject
  {
    FlopStartObject()
    {
      // initialize counters for master thread before all others
      runThread() ;
    }
    void runThread() const
    {
      Dune::Fem::FlopCounter::start();
    }
  };

  struct FlopStopObject
  {
    void runThread() const
    {
      Dune::Fem::FlopCounter::stop();
    }
  };

  template <int polynomialOrder, class ProblemTraits>
  inline void simulate(const ProblemTraits& problem)
  {
#ifdef BASEFUNCTIONSET_CODEGEN_GENERATE
    //only one thread for codegen
    const int numThreads = 1;
#else
    // get number of desired threads (default is 1)
    const int numThreads = Dune::Fem::Parameter::getValue< int >("fem.parallel.numberofthreads", 1);
#endif
    Dune :: Fem :: ThreadManager :: setMaxNumberThreads( numThreads );

    Dune::Fem::FemEoc::clear();

    const bool countFlops = Dune::Fem::Parameter::getValue< bool >("femdg.flopcounter", false );

    // if flop count is enabled count floating point operations (PAPI needed)
    // start flop counters for all threads
    if( countFlops )
    {
      FlopStartObject startObj ;
      Dune::Fem::ThreadHandle::run( startObj );
    }

    typedef Dune::GridSelector :: GridType GridType;

    // typedef ProblemCreator< GridType, polynomialOrder > ProblemTraits;

    // return type of initializeGrid is Dune::GridPtr, use release such that memory of GridPtr is released
    std::unique_ptr< GridType > gridptr( problem.initializeGrid().release() );

    typedef typename ProblemTraits :: template Stepper< polynomialOrder > :: Type StepperType;
    std::unique_ptr< StepperType > stepper( new StepperType( *gridptr, problem.moduleName() ) );

    // new method, the ProblemGenerator simply creates the stepper
    compute( *stepper );

    // stop flop counters for all threads
    if( countFlops )
    {
      FlopStopObject stopObj ;
      Dune::Fem::ThreadHandle::run( stopObj );
      // print results
      Dune::Fem::FlopCounter::print( std::cout );
    }
  } // end simulate

  template <int polOrd>
  struct SimulatePolOrd
  {
    template <class ProblemTraits>
    static void apply( const ProblemTraits& problem, const int polynomialOrder, const bool computeAnyway )
    {
#ifdef BASEFUNCTIONSET_CODEGEN_GENERATE
      Dune::Fem::CodegenInfo :: instance().setFileName( autoFilename( CODEDIM, polOrd ) );
#endif
      if( computeAnyway || polOrd == polynomialOrder )
      {
        if( Dune::Fem::Parameter::verbose() )
          std::cout << "Simulator: run for polynomialOrder = " << polOrd << std::endl;

        simulate< polOrd > ( problem );
      }
    }
  };

  struct Simulator
  {
    template <class ProblemTraits>
    static void run( const ProblemTraits& problem )
    {
#ifdef BASEFUNCTIONSET_CODEGEN_GENERATE
      std::cout << "Generating Code \n";
      try
      {
#endif
        int polOrder = 1;
        polOrder = Dune::Fem::Parameter :: getValue("femdg.polynomialOrder", polOrder );

        // run through all available polynomial order and check with dynamic polOrder
        // when -DONLY_ONE_P was passed only POLORDER is used
        Dune::ForLoop< SimulatePolOrd, MIN_POLORD, MAX_POLORD > :: apply( problem, polOrder, bool(MIN_POLORD == MAX_POLORD) );
#ifdef BASEFUNCTIONSET_CODEGEN_GENERATE
      }
      catch (Dune::Fem::CodegenInfoFinished) {}

      std::cerr << "Code for k="<< MAX_POLORD << " generated!! " << std::endl;
      Dune::Fem::CodegenInfo :: instance().dumpInfo();
      Dune::Fem::CodegenInfo :: instance().clear();
      std::remove( autoFilename( CODEDIM, MAX_POLORD ).c_str() );
      finalizeCodegen();
#endif
    }
  };

} // namespace Dune
#endif // #ifndef DUNE_FEM_DG_SIMULATOR_HH
