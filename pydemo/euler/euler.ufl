gamma = 1.4
class Compressible2DEuler:
    def pressure(U):
        return (U[3]-(U[1]**2+U[2]**2)/2)*(gamma-1)
    def toCons(U):
        return [U[0],U[0]*U[1],U[0]*U[2],U[3]/(gamma-1)+U[0]/2*(U[1]**2+U[2]**2)]
    def toPrim(U):
        return [U[0],U[1]/U[0],U[2]/U[0],Compressible2DEuler.pressure(U)]
    def F_c(U):
        rho, u,v, p = Compressible2DEuler.toPrim(U)
        rE = U[-1]
        res = as_matrix( [ [rho*u, rho*v],
                           [rho*u**2 + p, rho*u*v],
                           [rho*u*v, rho*v**2 + p],
                           [(rE+p)*u, (rE+p)*v]
                         ])
        return res
    def alpha(U,n):
        rho, u,v, p = Compressible2DEuler.toPrim(U)
        return abs(u*n[0]+v*n[1]) + sqrt(gamma*p/rho)

Model = Compressible2DEuler

from dune.ufl import Space, NamedConstant
space = Space(2,4)
u = TrialFunction(space)
v = TestFunction(space)

# just a starting point...
def femdgModel(description):
    return inner(description.F_c(u),grad(v))*dx

F = femdgModel(Model)
